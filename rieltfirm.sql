--
-- Скрипт сгенерирован Devart dbForge Studio for MySQL, Версия 7.3.131.0
-- Домашняя страница продукта: http://www.devart.com/ru/dbforge/mysql/studio
-- Дата скрипта: 13.07.2018 22:55:04
-- Версия сервера: 5.5.53
-- Версия клиента: 4.1
--


-- 
-- Отключение внешних ключей
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Установить режим SQL (SQL mode)
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Установка кодировки, с использованием которой клиент будет посылать запросы на сервер
--
SET NAMES 'utf8';

--
-- Установка базы данных по умолчанию
--
USE rieltfirm;

DELIMITER $$

--
-- Удалить функцию "triangle_func"
--
DROP FUNCTION IF EXISTS triangle_func$$

--
-- Удалить функцию "trapec_func"
--
DROP FUNCTION IF EXISTS trapec_func$$

--
-- Удалить функцию "sigmoid_addition_nosimetric"
--
DROP FUNCTION IF EXISTS sigmoid_addition_nosimetric$$

--
-- Удалить функцию "sigmoid_addition"
--
DROP FUNCTION IF EXISTS sigmoid_addition$$

--
-- Удалить функцию "sigmoid"
--
DROP FUNCTION IF EXISTS sigmoid$$

--
-- Удалить функцию "general_bell"
--
DROP FUNCTION IF EXISTS general_bell$$

--
-- Удалить функцию "gauss_simpl_func"
--
DROP FUNCTION IF EXISTS gauss_simpl_func$$

--
-- Удалить функцию "gauss_2_side"
--
DROP FUNCTION IF EXISTS gauss_2_side$$

--
-- Удалить функцию "change_fp"
--
DROP FUNCTION IF EXISTS change_fp$$

DELIMITER ;

--
-- Удалить таблицу "user"
--
DROP TABLE IF EXISTS user;

--
-- Удалить таблицу "streets"
--
DROP TABLE IF EXISTS streets;

--
-- Удалить таблицу "object"
--
DROP TABLE IF EXISTS object;

--
-- Удалить таблицу "migration"
--
DROP TABLE IF EXISTS migration;

--
-- Удалить таблицу "ling_var"
--
DROP TABLE IF EXISTS ling_var;

--
-- Удалить таблицу "ling_term"
--
DROP TABLE IF EXISTS ling_term;

--
-- Удалить таблицу "func_own"
--
DROP TABLE IF EXISTS func_own;

--
-- Удалить таблицу "cities"
--
DROP TABLE IF EXISTS cities;

--
-- Удалить таблицу "belong"
--
DROP TABLE IF EXISTS belong;

--
-- Установка базы данных по умолчанию
--
USE rieltfirm;

--
-- Создать таблицу "belong"
--
CREATE TABLE belong (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  id_ling_term int(11) UNSIGNED NOT NULL DEFAULT 0,
  id_object int(11) UNSIGNED NOT NULL DEFAULT 0,
  own decimal(3, 2) UNSIGNED DEFAULT 0.00,
  PRIMARY KEY (id),
  CONSTRAINT FK_belong_id_ling_term FOREIGN KEY (id_ling_term)
  REFERENCES ling_term (id) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT FK_belong_id_object FOREIGN KEY (id_object)
  REFERENCES object (id) ON DELETE CASCADE ON UPDATE NO ACTION
)
ENGINE = INNODB
AUTO_INCREMENT = 2838
AVG_ROW_LENGTH = 60
CHARACTER SET cp1251
COLLATE cp1251_general_ci
ROW_FORMAT = fixed;

--
-- Создать таблицу "cities"
--
CREATE TABLE cities (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  name varchar(50) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 11
AVG_ROW_LENGTH = 1820
CHARACTER SET cp1251
COLLATE cp1251_general_ci;

--
-- Создать таблицу "func_own"
--
CREATE TABLE func_own (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  name varchar(50) NOT NULL DEFAULT 'Нет имени',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 9
AVG_ROW_LENGTH = 2048
CHARACTER SET cp1251
COLLATE cp1251_general_ci
ROW_FORMAT = DYNAMIC;

--
-- Создать таблицу "ling_term"
--
CREATE TABLE ling_term (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  name varchar(50) NOT NULL DEFAULT 'Нет имени',
  id_func_own int(11) UNSIGNED NOT NULL DEFAULT 0,
  id_ling_var int(11) UNSIGNED NOT NULL DEFAULT 0,
  a decimal(15, 5) NOT NULL DEFAULT 0.00000,
  b decimal(15, 5) NOT NULL DEFAULT 0.00000,
  c decimal(15, 5) DEFAULT 0.00000,
  d decimal(15, 5) DEFAULT 0.00000,
  PRIMARY KEY (id),
  CONSTRAINT FK_ling_var_id_atribute FOREIGN KEY (id_ling_var)
  REFERENCES ling_var (id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT FK_ling_var_id_func_own FOREIGN KEY (id_func_own)
  REFERENCES func_own (id) ON DELETE CASCADE ON UPDATE CASCADE
)
ENGINE = INNODB
AUTO_INCREMENT = 59
AVG_ROW_LENGTH = 16384
CHARACTER SET cp1251
COLLATE cp1251_general_ci
ROW_FORMAT = DYNAMIC;

--
-- Создать таблицу "ling_var"
--
CREATE TABLE ling_var (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  name varchar(50) NOT NULL DEFAULT 'Нет имени',
  range_left decimal(10, 0) DEFAULT 0,
  range_right decimal(10, 0) DEFAULT 0,
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 13
AVG_ROW_LENGTH = 1365
CHARACTER SET cp1251
COLLATE cp1251_general_ci
ROW_FORMAT = DYNAMIC;

--
-- Создать таблицу "migration"
--
CREATE TABLE migration (
  version varchar(180) NOT NULL,
  apply_time int(11) DEFAULT NULL,
  PRIMARY KEY (version)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 8192
CHARACTER SET cp1251
COLLATE cp1251_general_ci;

--
-- Создать таблицу "object"
--
CREATE TABLE object (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  id_city int(11) UNSIGNED NOT NULL,
  id_street int(11) UNSIGNED NOT NULL,
  num_house char(5) NOT NULL,
  ldg char(5) DEFAULT '0',
  type_tread tinyint(1) NOT NULL DEFAULT 0,
  price int(11) NOT NULL DEFAULT 0,
  size_amount int(11) NOT NULL DEFAULT 0,
  size_life int(11) NOT NULL DEFAULT 0,
  size_kitchen int(11) NOT NULL DEFAULT 0,
  floor int(11) NOT NULL DEFAULT 1,
  home_floors int(11) NOT NULL DEFAULT 1,
  num_bathroom int(11) NOT NULL DEFAULT 0,
  type_bathroom tinyint(1) NOT NULL DEFAULT 0,
  amount_room int(11) NOT NULL DEFAULT 1,
  elevator tinyint(1) NOT NULL DEFAULT 0,
  distance_to_sea int(11) DEFAULT NULL,
  distance_to_beach int(11) DEFAULT NULL,
  distance_to_shop int(11) DEFAULT NULL,
  distance_to_bus_stop int(11) DEFAULT NULL,
  distance_school int(11) DEFAULT NULL,
  hight_on_sea int(11) DEFAULT NULL,
  viev_of_sea tinyint(1) NOT NULL DEFAULT 0,
  `desc` varchar(950) DEFAULT NULL,
  PRIMARY KEY (id),
  CONSTRAINT FK_object_id_city FOREIGN KEY (id_city)
  REFERENCES cities (id) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT FK_object_id_street FOREIGN KEY (id_street)
  REFERENCES streets (id) ON DELETE NO ACTION ON UPDATE CASCADE
)
ENGINE = INNODB
AUTO_INCREMENT = 34
AVG_ROW_LENGTH = 564
CHARACTER SET cp1251
COLLATE cp1251_general_ci
ROW_FORMAT = DYNAMIC;

--
-- Создать таблицу "streets"
--
CREATE TABLE streets (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  name varchar(70) NOT NULL,
  id_city int(11) UNSIGNED NOT NULL,
  PRIMARY KEY (id),
  CONSTRAINT FK_streets_id_city FOREIGN KEY (id_city)
  REFERENCES cities (id) ON DELETE CASCADE ON UPDATE CASCADE
)
ENGINE = INNODB
AUTO_INCREMENT = 30
AVG_ROW_LENGTH = 1365
CHARACTER SET cp1251
COLLATE cp1251_general_ci;

--
-- Создать таблицу "user"
--
CREATE TABLE user (
  id int(11) NOT NULL AUTO_INCREMENT,
  username varchar(255) NOT NULL,
  auth_key varchar(32) NOT NULL,
  password_hash varchar(255) NOT NULL,
  password_reset_token varchar(255) DEFAULT NULL,
  email varchar(255) NOT NULL,
  status smallint(6) NOT NULL DEFAULT 10,
  created_at int(11) NOT NULL,
  updated_at int(11) NOT NULL,
  fio varchar(255) DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE INDEX email (email),
  UNIQUE INDEX password_reset_token (password_reset_token),
  UNIQUE INDEX username (username)
)
ENGINE = INNODB
AUTO_INCREMENT = 8
AVG_ROW_LENGTH = 2340
CHARACTER SET cp1251
COLLATE cp1251_general_ci;

DELIMITER $$

--
-- Создать функцию "change_fp"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION change_fp (fp int, a decimal(15, 5), b decimal(15, 5), c decimal(15, 5), d decimal(15, 5), x decimal)
RETURNS decimal(3, 2)
BEGIN
  DECLARE mu decimal(3, 2);
  CASE fp
    WHEN 1 THEN SET mu = triangle_func(x, a, b, c);
    WHEN 2 THEN SET mu = trapec_func(x, a, b, c, d);
    WHEN 3 THEN SET mu = gauss_simpl_func(x, a, b);
    WHEN 4 THEN SET mu = gauss_2_side(x, a, b, c, d);
    WHEN 5 THEN SET mu = general_bell(x, a, b, c);
    WHEN 6 THEN SET mu = sigmoid(x, a, b);
    WHEN 7 THEN SET mu = sigmoid_addition(x, a, b, c, d);
    WHEN 8 THEN SET mu = sigmoid_addition_nosimetric(x, a, b, c, d);
  END CASE;
  RETURN mu;
END
$$

--
-- Создать функцию "gauss_2_side"
--
CREATE DEFINER = 'root'@'%'
FUNCTION gauss_2_side (x decimal, a1 decimal(15, 5), c1 decimal(15, 5), a2 decimal(15, 5), c2 decimal(15, 5))
RETURNS decimal(3, 2)
BEGIN
  DECLARE mu decimal(3, 2);

  IF c1 <= c2 THEN
    CASE
      WHEN x < c1 THEN BEGIN
          SET mu = EXP(POW(x - c1, 2) / (-2 * POW(a1, 2)));
        END;
      WHEN c1 <= x AND
        x <= c2 THEN BEGIN
          SET mu = 1;
        END;
      WHEN x > c2 THEN BEGIN
          SET mu = EXP(POW(x - c2, 2) / (-2 * POW(a2, 2)));
        END;
    END CASE;
  END IF;
  IF c1 > c2 THEN
    CASE
      WHEN x < c2 THEN BEGIN
          SET mu = EXP(POW(x - c1, 2) / (-2 * POW(a1, 2)));
        END;
      WHEN c2 <= x AND
        x <= c1 THEN BEGIN
          SET mu = EXP(POW(x - c1, 2) / (-2 * POW(a1, 2))) * EXP(POW(x - c2, 2) / (-2 * POW(a2, 2)));
        END;
      WHEN x > c1 THEN BEGIN
          SET mu = EXP(POW(x - c2, 2) / (-2 * POW(a2, 2)));
        END;
    END CASE;
  END IF;
  RETURN mu;
END
$$

--
-- Создать функцию "gauss_simpl_func"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION gauss_simpl_func (x decimal, q decimal(15, 5), c decimal(15, 5))
RETURNS decimal(3, 2)
BEGIN
  DECLARE mu decimal(3, 2);
  SET mu = EXP(-POW((x - c), 2) / POW(q, 2));
  RETURN mu;
END
$$

--
-- Создать функцию "general_bell"
--
CREATE DEFINER = 'root'@'%'
FUNCTION general_bell (x decimal, a decimal(15, 5), b decimal(15, 5), c decimal(15, 5))
RETURNS decimal(3, 2)
BEGIN
  DECLARE mu decimal(3, 2);

  SET mu = 1 / POW(ABS((x - c) / a), 2 * b);
  RETURN mu;
END
$$

--
-- Создать функцию "sigmoid"
--
CREATE DEFINER = 'root'@'%'
FUNCTION sigmoid (x decimal, a decimal(15, 5), c decimal(15, 5))
RETURNS decimal(3, 2)
BEGIN
  DECLARE mu decimal(3, 2);
  IF (ABS(-a * (x - c)) > 708) THEN
    SET mu = 1 / (1 + EXP(708));
  ELSE
    SET mu = 1 / (1 + EXP(-a * (x - c)));
  END IF;
  RETURN mu;
END
$$

--
-- Создать функцию "sigmoid_addition"
--
CREATE DEFINER = 'root'@'%'
FUNCTION sigmoid_addition (x decimal, a1 decimal(15, 5), c1 decimal(15, 5), a2 decimal(15, 5), c2 decimal(15, 5))
RETURNS decimal(3, 2)
BEGIN
  DECLARE mu decimal(3, 2);
  IF (ABS(-a1 * (x - c1)) > 708) THEN
    IF (ABS(-a2 * (x - c2)) > 708) THEN
      SET mu = 1 / (1 + EXP(707)) - 1 / (1 + EXP(707));
    ELSE
      SET mu = 1 / (1 + EXP(707)) - 1 / (1 + EXP(-a2 * (x - c2)));
    END IF;
  ELSE
    IF (ABS(-a2 * (x - c2)) > 708) THEN
      SET mu = 1 / (1 + EXP(-a1 * (x - c1))) - 1 / (1 + EXP(707));
    ELSE
      SET mu = 1 / (1 + EXP(-a1 * (x - c1))) - 1 / (1 + EXP(-a2 * (x - c2)));
    END IF;
  END IF;
  RETURN mu;
END
$$

--
-- Создать функцию "sigmoid_addition_nosimetric"
--
CREATE DEFINER = 'root'@'%'
FUNCTION sigmoid_addition_nosimetric (x decimal, a1 decimal(15, 5), c1 decimal(15, 5), a2 decimal(15, 5), c2 decimal(15, 5))
RETURNS decimal(3, 2)
BEGIN
  DECLARE mu decimal(3, 2);
  IF (ABS(-a1 * (x - c1)) > 708) THEN
    IF (ABS(-a2 * (x - c2)) > 708) THEN
      SET mu = 1 / (1 + EXP(707)) * (1 / (1 + EXP(707)));
    ELSE
      SET mu = 1 / (1 + EXP(707)) * (1 / (1 + EXP(-a2 * (x - c2))));
    END IF;
  ELSE
    IF (ABS(-a2 * (x - c2)) > 708) THEN
      SET mu = 1 / (1 + EXP(-a1 * (x - c1))) * (1 / (1 + EXP(707)));
    ELSE
      SET mu = 1 / (1 + EXP(-a1 * (x - c1))) * (1 / (1 + EXP(-a2 * (x - c2))));
    END IF;
  END IF;
  RETURN mu;
END
$$

--
-- Создать функцию "trapec_func"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION trapec_func (x decimal, a decimal(15, 5), b decimal(15, 5), c decimal(15, 5), d decimal(15, 5))
RETURNS decimal(3, 2)
BEGIN
  DECLARE mu decimal(3, 2);
  IF x < a
    OR x > d THEN
    SET mu = 0;
  END IF;

  IF a <= x
    AND x < b THEN
    SET mu = (x - a) / (b - a);
  END IF;

  IF b <= x
    AND x <= c THEN
    SET mu = 1;
  END IF;

  IF c < x
    AND x <= d THEN
    SET mu = (d - x) / (d - c);
  END IF;
  RETURN mu;
END
$$

--
-- Создать функцию "triangle_func"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION triangle_func (x decimal, a decimal(15, 5), b decimal(15, 5), c decimal(15, 5))
RETURNS decimal(3, 2)
BEGIN
  DECLARE mu decimal(3, 2);
  IF x <= a
    OR x >= c THEN
    SET mu = 0.0;
  END IF;
  IF a < x
    AND x <= b THEN
    SET mu = (x - a) / (b - a);
  END IF;
  IF b < x
    AND x < c THEN
    SET mu = (c - x) / (c - b);
  END IF;
  RETURN mu;
END
$$

DELIMITER ;

-- 
-- Вывод данных для таблицы belong
--
INSERT INTO belong VALUES
(1268, 3, 4, 0.00),
(1269, 6, 4, 0.87),
(1270, 8, 4, 0.92),
(1271, 9, 4, 0.00),
(1272, 10, 4, 0.00),
(1273, 11, 4, 0.00),
(1274, 12, 4, 0.40),
(1275, 13, 4, 0.85),
(1276, 14, 4, 0.00),
(1277, 15, 4, 0.00),
(1278, 16, 4, 0.00),
(1279, 17, 4, 0.00),
(1280, 18, 4, 1.00),
(1281, 19, 4, 0.00),
(1282, 20, 4, 0.00),
(1283, 21, 4, 0.00),
(1284, 22, 4, 0.50),
(1285, 23, 4, 1.00),
(1286, 24, 4, 0.99),
(1287, 25, 4, 0.01),
(1288, 26, 4, 0.00),
(1289, 27, 4, 1.00),
(1290, 28, 4, 0.00),
(1291, 29, 4, 0.00),
(1292, 30, 4, 0.00),
(1293, 31, 4, 0.00),
(1294, 39, 4, 0.00),
(1295, 40, 4, 1.00),
(1296, 41, 4, 0.92),
(1297, 42, 4, 0.00),
(1298, 43, 4, 0.27),
(1299, 44, 4, 0.04),
(1300, 45, 4, 0.00),
(1301, 46, 4, 1.00),
(1302, 47, 4, 0.70),
(1303, 48, 4, 0.00),
(1304, 49, 4, 0.00),
(1305, 50, 4, 0.00),
(1306, 51, 4, 0.90),
(1346, 3, 6, 0.00),
(1347, 6, 6, 1.00),
(1348, 8, 6, 0.00),
(1349, 9, 6, 0.00),
(1350, 10, 6, 0.00),
(1351, 11, 6, 0.00),
(1352, 12, 6, 0.75),
(1353, 13, 6, 0.15),
(1354, 14, 6, 0.00),
(1355, 15, 6, 0.00),
(1356, 16, 6, 0.00),
(1357, 17, 6, 1.00),
(1358, 18, 6, 0.00),
(1359, 19, 6, 0.00),
(1360, 20, 6, 0.00),
(1361, 21, 6, 0.00),
(1362, 22, 6, 0.50),
(1363, 23, 6, 0.00),
(1364, 24, 6, 0.03),
(1365, 25, 6, 0.14),
(1366, 26, 6, 0.00),
(1367, 27, 6, 0.00),
(1368, 28, 6, 1.00),
(1369, 29, 6, 0.00),
(1370, 30, 6, 0.00),
(1371, 31, 6, 1.00),
(1372, 39, 6, 1.00),
(1373, 40, 6, 0.00),
(1374, 41, 6, 0.16),
(1375, 42, 6, 0.05),
(1376, 43, 6, 0.00),
(1377, 44, 6, 0.87),
(1378, 45, 6, 0.99),
(1379, 46, 6, 0.00),
(1380, 47, 6, 0.99),
(1381, 48, 6, 0.00),
(1382, 49, 6, 1.00),
(1383, 50, 6, 0.00),
(1384, 51, 6, 0.00),
(1385, 3, 7, 0.89),
(1386, 6, 7, 0.00),
(1387, 8, 7, 0.00),
(1388, 9, 7, 0.00),
(1389, 10, 7, 0.00),
(1390, 11, 7, 0.06),
(1391, 12, 7, 0.80),
(1392, 13, 7, 0.00),
(1393, 14, 7, 0.00),
(1394, 15, 7, 0.00),
(1395, 16, 7, 0.00),
(1396, 17, 7, 1.00),
(1397, 18, 7, 0.00),
(1398, 19, 7, 0.00),
(1399, 20, 7, 0.00),
(1400, 21, 7, 9.99),
(1401, 22, 7, 0.50),
(1402, 23, 7, 0.00),
(1403, 24, 7, 0.00),
(1404, 25, 7, 1.00),
(1405, 26, 7, 0.00),
(1406, 27, 7, 1.00),
(1407, 28, 7, 0.00),
(1408, 29, 7, 0.00),
(1409, 30, 7, 0.00),
(1410, 31, 7, 0.93),
(1411, 39, 7, 0.00),
(1412, 40, 7, 0.08),
(1413, 41, 7, 0.93),
(1414, 42, 7, 0.00),
(1415, 43, 7, 0.76),
(1416, 44, 7, 0.01),
(1417, 45, 7, 0.27),
(1418, 46, 7, 0.00),
(1419, 47, 7, 0.96),
(1420, 48, 7, 0.00),
(1421, 49, 7, 1.00),
(1422, 50, 7, 0.00),
(1423, 51, 7, 0.00),
(1463, 3, 9, 0.00),
(1464, 6, 9, 0.00),
(1465, 8, 9, 1.00),
(1466, 9, 9, 0.00),
(1467, 10, 9, 0.00),
(1468, 11, 9, 0.00),
(1469, 12, 9, 0.00),
(1470, 13, 9, 0.01),
(1471, 14, 9, 1.00),
(1472, 15, 9, 0.00),
(1473, 16, 9, 0.00),
(1474, 17, 9, 0.00),
(1475, 18, 9, 0.00),
(1476, 19, 9, 0.27),
(1477, 20, 9, 0.00),
(1478, 21, 9, 0.00),
(1479, 22, 9, 0.50),
(1480, 23, 9, 0.00),
(1481, 24, 9, 0.03),
(1482, 25, 9, 0.14),
(1483, 26, 9, 0.00),
(1484, 27, 9, 0.00),
(1485, 28, 9, 1.00),
(1486, 29, 9, 0.00),
(1487, 30, 9, 0.00),
(1488, 31, 9, 0.11),
(1489, 39, 9, 0.00),
(1490, 40, 9, 0.77),
(1491, 41, 9, 0.00),
(1492, 42, 9, 0.99),
(1493, 43, 9, 0.00),
(1494, 44, 9, 1.00),
(1495, 45, 9, 0.01),
(1496, 46, 9, 0.60),
(1497, 47, 9, 0.03),
(1498, 48, 9, 0.52),
(1499, 49, 9, 0.98),
(1500, 50, 9, 0.00),
(1501, 51, 9, 0.00),
(1502, 3, 10, 0.00),
(1503, 6, 10, 0.00),
(1504, 8, 10, 1.00),
(1505, 9, 10, 0.00),
(1506, 10, 10, 0.00),
(1507, 11, 10, 0.00),
(1508, 12, 10, 0.00),
(1509, 13, 10, 0.00),
(1510, 14, 10, 1.00),
(1511, 15, 10, 0.00),
(1512, 16, 10, 0.00),
(1513, 17, 10, 0.00),
(1514, 18, 10, 0.00),
(1515, 19, 10, 1.00),
(1516, 20, 10, 0.00),
(1517, 21, 10, 0.00),
(1518, 22, 10, 0.50),
(1519, 23, 10, 0.00),
(1520, 24, 10, 0.00),
(1521, 25, 10, 0.47),
(1522, 26, 10, 0.00),
(1523, 27, 10, 0.00),
(1524, 28, 10, 1.00),
(1525, 29, 10, 1.00),
(1526, 30, 10, 0.00),
(1527, 31, 10, 0.00),
(1528, 39, 10, 0.00),
(1529, 40, 10, 1.00),
(1530, 41, 10, 0.00),
(1531, 42, 10, 0.68),
(1532, 43, 10, 0.01),
(1533, 44, 10, 0.20),
(1534, 45, 10, 0.00),
(1535, 46, 10, 1.00),
(1536, 47, 10, 0.13),
(1537, 48, 10, 0.02),
(1538, 49, 10, 0.91),
(1539, 50, 10, 0.00),
(1540, 51, 10, 0.00),
(1541, 3, 11, 0.65),
(1542, 6, 11, 0.03),
(1543, 8, 11, 0.00),
(1544, 9, 11, 0.00),
(1545, 10, 11, 0.00),
(1546, 11, 11, 0.00),
(1547, 12, 11, 1.00),
(1548, 13, 11, 0.00),
(1549, 14, 11, 0.00),
(1550, 15, 11, 0.00),
(1551, 16, 11, 0.00),
(1552, 17, 11, 1.00),
(1553, 18, 11, 0.00),
(1554, 19, 11, 0.00),
(1555, 20, 11, 0.00),
(1556, 21, 11, 9.99),
(1557, 22, 11, 0.50),
(1558, 23, 11, 0.00),
(1559, 24, 11, 0.61),
(1560, 25, 11, 0.03),
(1561, 26, 11, 0.00),
(1562, 27, 11, 1.00),
(1563, 28, 11, 0.00),
(1564, 29, 11, 0.00),
(1565, 30, 11, 0.00),
(1566, 31, 11, 0.00),
(1567, 39, 11, 0.00),
(1568, 40, 11, 1.00),
(1569, 41, 11, 0.99),
(1570, 42, 11, 0.00),
(1571, 43, 11, 0.00),
(1572, 44, 11, 1.00),
(1573, 45, 11, 0.00),
(1574, 46, 11, 1.00),
(1575, 47, 11, 0.07),
(1576, 48, 11, 0.07),
(1577, 49, 11, 0.92),
(1578, 50, 11, 0.00),
(1579, 51, 11, 0.00),
(1580, 3, 12, 0.05),
(1581, 6, 12, 0.86),
(1582, 8, 12, 0.00),
(1583, 9, 12, 0.00),
(1584, 10, 12, 0.00),
(1585, 11, 12, 0.00),
(1586, 12, 12, 0.70),
(1587, 13, 12, 0.22),
(1588, 14, 12, 0.00),
(1589, 15, 12, 0.00),
(1590, 16, 12, 0.00),
(1591, 17, 12, 0.00),
(1592, 18, 12, 1.00),
(1593, 19, 12, 0.00),
(1594, 20, 12, 0.00),
(1595, 21, 12, 0.16),
(1596, 22, 12, 0.50),
(1597, 23, 12, 0.00),
(1598, 24, 12, 0.29),
(1599, 25, 12, 0.05),
(1600, 26, 12, 0.00),
(1601, 27, 12, 1.00),
(1602, 28, 12, 0.00),
(1603, 29, 12, 0.00),
(1604, 30, 12, 0.00),
(1605, 31, 12, 0.01),
(1606, 39, 12, 0.00),
(1607, 40, 12, 0.97),
(1608, 41, 12, 0.99),
(1609, 42, 12, 0.00),
(1610, 43, 12, 0.35),
(1611, 44, 12, 0.03),
(1612, 45, 12, 0.00),
(1613, 46, 12, 1.00),
(1614, 47, 12, 0.98),
(1615, 48, 12, 0.00),
(1616, 49, 12, 1.00),
(1617, 50, 12, 0.00),
(1618, 51, 12, 0.00),
(1658, 3, 13, 0.95),
(1659, 6, 13, 0.00),
(1660, 8, 13, 0.00),
(1661, 9, 13, 0.00),
(1662, 10, 13, 0.00),
(1663, 11, 13, 0.41),
(1664, 12, 13, 0.00),
(1665, 13, 13, 0.00),
(1666, 14, 13, 0.00),
(1667, 15, 13, 0.00),
(1668, 16, 13, 0.00),
(1669, 17, 13, 1.00),
(1670, 18, 13, 0.00),
(1671, 19, 13, 0.00),
(1672, 20, 13, 0.65),
(1673, 21, 13, 0.07),
(1674, 22, 13, 0.50),
(1675, 23, 13, 1.00),
(1676, 24, 13, 0.99),
(1677, 25, 13, 0.01),
(1678, 26, 13, 0.00),
(1679, 27, 13, 1.00),
(1680, 28, 13, 0.00),
(1681, 29, 13, 0.00),
(1682, 30, 13, 0.00),
(1683, 31, 13, 0.00),
(1684, 39, 13, 0.00),
(1685, 40, 13, 1.00),
(1686, 41, 13, 0.95),
(1687, 42, 13, 0.00),
(1688, 43, 13, 0.00),
(1689, 44, 13, 0.99),
(1690, 45, 13, 0.00),
(1691, 46, 13, 1.00),
(1692, 47, 13, 0.70),
(1693, 48, 13, 0.00),
(1694, 49, 13, 1.00),
(1695, 50, 13, 0.00),
(1696, 51, 13, 0.00),
(1738, 3, 16, 0.92),
(1739, 6, 16, 0.00),
(1740, 8, 16, 0.00),
(1741, 9, 16, 0.00),
(1742, 10, 16, 0.00),
(1743, 11, 16, 0.00),
(1744, 12, 16, 1.00),
(1745, 13, 16, 0.00),
(1746, 14, 16, 0.00),
(1747, 15, 16, 0.00),
(1748, 16, 16, 0.00),
(1749, 17, 16, 1.00),
(1750, 18, 16, 0.00),
(1751, 19, 16, 0.00),
(1752, 20, 16, 0.00),
(1753, 21, 16, 9.99),
(1754, 22, 16, 0.50),
(1755, 23, 16, 0.00),
(1756, 24, 16, 0.03),
(1757, 25, 16, 0.14),
(1758, 26, 16, 0.00),
(1759, 27, 16, 0.00),
(1760, 28, 16, 1.00),
(1761, 29, 16, 0.00),
(1762, 30, 16, 0.00),
(1763, 31, 16, 1.00),
(1764, 39, 16, 0.00),
(1765, 40, 16, 0.00),
(1766, 41, 16, 0.92),
(1767, 42, 16, 0.00),
(1768, 43, 16, 0.86),
(1769, 44, 16, 0.01),
(1770, 45, 16, 0.94),
(1771, 46, 16, 0.00),
(1772, 47, 16, 0.92),
(1773, 48, 16, 0.00),
(1774, 49, 16, 1.00),
(1775, 50, 16, 0.00),
(1776, 51, 16, 0.00),
(1777, 3, 17, 0.00),
(1778, 6, 17, 0.00),
(1779, 8, 17, 1.00),
(1780, 9, 17, 0.00),
(1781, 10, 17, 0.00),
(1782, 11, 17, 0.00),
(1783, 12, 17, 0.00),
(1784, 13, 17, 0.00),
(1785, 14, 17, 1.00),
(1786, 15, 17, 0.00),
(1787, 16, 17, 0.00),
(1788, 17, 17, 0.00),
(1789, 18, 17, 0.00),
(1790, 19, 17, 1.00),
(1791, 20, 17, 0.00),
(1792, 21, 17, 0.00),
(1793, 22, 17, 0.50),
(1794, 23, 17, 0.00),
(1795, 24, 17, 0.10),
(1796, 25, 17, 0.08),
(1797, 26, 17, 0.00),
(1798, 27, 17, 0.00),
(1799, 28, 17, 1.00),
(1800, 29, 17, 1.00),
(1801, 30, 17, 0.00),
(1802, 31, 17, 1.00),
(1803, 39, 17, 1.00),
(1804, 40, 17, 0.00),
(1805, 41, 17, 1.00),
(1806, 42, 17, 0.00),
(1807, 43, 17, 0.00),
(1808, 44, 17, 0.93),
(1809, 45, 17, 0.98),
(1810, 46, 17, 0.00),
(1811, 47, 17, 0.24),
(1812, 48, 17, 0.00),
(1813, 49, 17, 1.00),
(1814, 50, 17, 0.00),
(1815, 51, 17, 0.00),
(1816, 3, 18, 0.01),
(1817, 6, 18, 0.97),
(1818, 8, 18, 0.00),
(1819, 9, 18, 0.00),
(1820, 10, 18, 0.00),
(1821, 11, 18, 0.00),
(1822, 12, 18, 0.70),
(1823, 13, 18, 0.22),
(1824, 14, 18, 0.00),
(1825, 15, 18, 0.00),
(1826, 16, 18, 0.00),
(1827, 17, 18, 0.00),
(1828, 18, 18, 1.00),
(1829, 19, 18, 0.00),
(1830, 20, 18, 0.15),
(1831, 21, 18, 9.99),
(1832, 22, 18, 0.50),
(1833, 23, 18, 0.00),
(1834, 24, 18, 0.86),
(1835, 25, 18, 0.02),
(1836, 26, 18, 0.00),
(1837, 27, 18, 1.00),
(1838, 28, 18, 0.00),
(1839, 29, 18, 0.00),
(1840, 30, 18, 0.00),
(1841, 31, 18, 0.98),
(1842, 39, 18, 0.00),
(1843, 40, 18, 0.03),
(1844, 41, 18, 0.00),
(1845, 42, 18, 1.00),
(1846, 43, 18, 0.05),
(1847, 44, 18, 0.11),
(1848, 45, 18, 0.27),
(1849, 46, 18, 0.00),
(1850, 47, 18, 1.00),
(1851, 48, 18, 0.00),
(1852, 49, 18, 1.00),
(1853, 50, 18, 0.00),
(1854, 51, 18, 0.00),
(1855, 3, 19, 0.00),
(1856, 6, 19, 1.00),
(1857, 8, 19, 0.01),
(1858, 9, 19, 0.00),
(1859, 10, 19, 0.00),
(1860, 11, 19, 0.00),
(1861, 12, 19, 0.00),
(1862, 13, 19, 0.96),
(1863, 14, 19, 0.01),
(1864, 15, 19, 0.00),
(1865, 16, 19, 0.00),
(1866, 17, 19, 1.00),
(1867, 18, 19, 0.00),
(1868, 19, 19, 0.00),
(1869, 20, 19, 0.00),
(1870, 21, 19, 0.00),
(1871, 22, 19, 0.50),
(1872, 23, 19, 1.00),
(1873, 24, 19, 0.99),
(1874, 25, 19, 0.01),
(1875, 26, 19, 0.00),
(1876, 27, 19, 1.00),
(1877, 28, 19, 0.00),
(1878, 29, 19, 0.00),
(1879, 30, 19, 0.00),
(1880, 31, 19, 0.27),
(1881, 39, 19, 0.00),
(1882, 40, 19, 0.60),
(1883, 41, 19, 1.00),
(1884, 42, 19, 0.00),
(1885, 43, 19, 0.00),
(1886, 44, 19, 1.00),
(1887, 45, 19, 0.01),
(1888, 46, 19, 0.73),
(1889, 47, 19, 0.02),
(1890, 48, 19, 0.81),
(1891, 49, 19, 0.99),
(1892, 50, 19, 0.00),
(1893, 51, 19, 0.00),
(1894, 3, 20, 0.31),
(1895, 6, 20, 0.18),
(1896, 8, 20, 0.00),
(1897, 9, 20, 0.00),
(1898, 10, 20, 0.00),
(1899, 11, 20, 0.33),
(1900, 12, 20, 0.10),
(1901, 13, 20, 0.00),
(1902, 14, 20, 0.00),
(1903, 15, 20, 0.00),
(1904, 16, 20, 0.00),
(1905, 17, 20, 1.00),
(1906, 18, 20, 0.00),
(1907, 19, 20, 0.00),
(1908, 20, 20, 0.25),
(1909, 21, 20, 9.99),
(1910, 22, 20, 0.50),
(1911, 23, 20, 0.00),
(1912, 24, 20, 0.96),
(1913, 25, 20, 0.01),
(1914, 26, 20, 0.00),
(1915, 27, 20, 1.00),
(1916, 28, 20, 0.00),
(1917, 29, 20, 0.00),
(1918, 30, 20, 0.00),
(1919, 31, 20, 1.00),
(1920, 39, 20, 0.00),
(1921, 40, 20, 0.00),
(1922, 41, 20, 0.58),
(1923, 42, 20, 0.01),
(1924, 43, 20, 0.00),
(1925, 44, 20, 0.99),
(1926, 45, 20, 0.78),
(1927, 46, 20, 0.00),
(1928, 47, 20, 0.86),
(1929, 48, 20, 0.00),
(1930, 49, 20, 1.00),
(1931, 50, 20, 0.00),
(1932, 51, 20, 0.00),
(1933, 3, 21, 0.01),
(1934, 6, 21, 0.99),
(1935, 8, 21, 0.00),
(1936, 9, 21, 0.00),
(1937, 10, 21, 0.00),
(1938, 11, 21, 0.00),
(1939, 12, 21, 0.00),
(1940, 13, 21, 1.00),
(1941, 14, 21, 0.00),
(1942, 15, 21, 0.00),
(1943, 16, 21, 0.00),
(1944, 17, 21, 0.00),
(1945, 18, 21, 1.00),
(1946, 19, 21, 0.00),
(1947, 20, 21, 0.00),
(1948, 21, 21, 0.00),
(1949, 22, 21, 0.50),
(1950, 23, 21, 0.00),
(1951, 24, 21, 0.10),
(1952, 25, 21, 0.08),
(1953, 26, 21, 0.00),
(1954, 27, 21, 0.00),
(1955, 28, 21, 1.00),
(1956, 29, 21, 0.00),
(1957, 30, 21, 0.00),
(1958, 31, 21, 1.00),
(1959, 39, 21, 0.00),
(1960, 40, 21, 0.00),
(1961, 41, 21, 1.00),
(1962, 42, 21, 0.00),
(1963, 43, 21, 0.00),
(1964, 44, 21, 0.72),
(1965, 45, 21, 0.77),
(1966, 46, 21, 0.00),
(1967, 47, 21, 1.00),
(1968, 48, 21, 0.00),
(1969, 49, 21, 1.00),
(1970, 50, 21, 0.00),
(1971, 51, 21, 0.00),
(1972, 3, 22, 0.23),
(1973, 6, 22, 0.29),
(1974, 8, 22, 0.00),
(1975, 9, 22, 0.00),
(1976, 10, 22, 0.00),
(1977, 11, 22, 0.00),
(1978, 12, 22, 1.00),
(1979, 13, 22, 0.01),
(1980, 14, 22, 0.00),
(1981, 15, 22, 0.00),
(1982, 16, 22, 0.00),
(1983, 17, 22, 1.00),
(1984, 18, 22, 0.00),
(1985, 19, 22, 0.00),
(1986, 20, 22, 0.00),
(1987, 21, 22, 0.16),
(1988, 22, 22, 0.50),
(1989, 23, 22, 1.00),
(1990, 24, 22, 0.99),
(1991, 25, 22, 0.01),
(1992, 26, 22, 0.00),
(1993, 27, 22, 1.00),
(1994, 28, 22, 0.00),
(1995, 29, 22, 0.00),
(1996, 30, 22, 0.00),
(1997, 31, 22, 0.00),
(1998, 39, 22, 0.00),
(1999, 40, 22, 0.99),
(2000, 41, 22, 1.00),
(2001, 42, 22, 0.00),
(2002, 43, 22, 0.00),
(2003, 44, 22, 1.00),
(2004, 45, 22, 0.00),
(2005, 46, 22, 0.93),
(2006, 47, 22, 0.00),
(2007, 48, 22, 1.00),
(2008, 49, 22, 0.99),
(2009, 50, 22, 0.00),
(2010, 51, 22, 0.00),
(2011, 3, 23, 0.00),
(2012, 6, 23, 0.99),
(2013, 8, 23, 0.61),
(2014, 9, 23, 0.00),
(2015, 10, 23, 0.00),
(2016, 11, 23, 0.00),
(2017, 12, 23, 0.15),
(2018, 13, 23, 0.99),
(2019, 14, 23, 0.00),
(2020, 15, 23, 0.00),
(2021, 16, 23, 0.00),
(2022, 17, 23, 0.00),
(2023, 18, 23, 1.00),
(2024, 19, 23, 0.00),
(2025, 20, 23, 0.00),
(2026, 21, 23, 0.00),
(2027, 22, 23, 0.50),
(2028, 23, 23, 0.00),
(2029, 24, 23, 0.29),
(2030, 25, 23, 0.05),
(2031, 26, 23, 0.00),
(2032, 27, 23, 0.00),
(2033, 28, 23, 1.00),
(2034, 29, 23, 0.00),
(2035, 30, 23, 0.00),
(2036, 31, 23, 0.05),
(2037, 39, 23, 0.00),
(2038, 40, 23, 0.87),
(2039, 41, 23, 1.00),
(2040, 42, 23, 0.00),
(2041, 43, 23, 0.92),
(2042, 44, 23, 0.00),
(2043, 45, 23, 0.00),
(2044, 46, 23, 1.00),
(2045, 47, 23, 0.00),
(2046, 48, 23, 1.00),
(2047, 49, 23, 0.92),
(2048, 50, 23, 0.00),
(2049, 51, 23, 0.00),
(2050, 3, 24, 0.35),
(2051, 6, 24, 0.14),
(2052, 8, 24, 0.00),
(2053, 9, 24, 0.00),
(2054, 10, 24, 0.00),
(2055, 11, 24, 0.37),
(2056, 12, 24, 0.00),
(2057, 13, 24, 0.00),
(2058, 14, 24, 0.00),
(2059, 15, 24, 0.00),
(2060, 16, 24, 0.00),
(2061, 17, 24, 1.00),
(2062, 18, 24, 0.00),
(2063, 19, 24, 0.00),
(2064, 20, 24, 0.30),
(2065, 21, 24, 9.99),
(2066, 22, 24, 0.50),
(2067, 23, 24, 0.00),
(2068, 24, 24, 0.96),
(2069, 25, 24, 0.01),
(2070, 26, 24, 0.00),
(2071, 27, 24, 1.00),
(2072, 28, 24, 0.00),
(2073, 29, 24, 0.00),
(2074, 30, 24, 0.00),
(2075, 31, 24, 0.94),
(2076, 39, 24, 0.00),
(2077, 40, 24, 0.07),
(2078, 41, 24, 0.38),
(2079, 42, 24, 0.02),
(2080, 43, 24, 0.00),
(2081, 44, 24, 0.96),
(2082, 45, 24, 0.00),
(2083, 46, 24, 0.92),
(2084, 47, 24, 1.00),
(2085, 48, 24, 0.00),
(2086, 49, 24, 0.99),
(2087, 50, 24, 0.00),
(2088, 51, 24, 0.00),
(2089, 3, 25, 0.00),
(2090, 6, 25, 0.84),
(2091, 8, 25, 0.94),
(2092, 9, 25, 0.00),
(2093, 10, 25, 0.00),
(2094, 11, 25, 0.00),
(2095, 12, 25, 0.00),
(2096, 13, 25, 1.00),
(2097, 14, 25, 0.00),
(2098, 15, 25, 0.00),
(2099, 16, 25, 0.00),
(2100, 17, 25, 0.00),
(2101, 18, 25, 1.00),
(2102, 19, 25, 0.00),
(2103, 20, 25, 0.00),
(2104, 21, 25, 0.00),
(2105, 22, 25, 0.50),
(2106, 23, 25, 0.00),
(2107, 24, 25, 0.01),
(2108, 25, 25, 0.22),
(2109, 26, 25, 0.00),
(2110, 27, 25, 0.00),
(2111, 28, 25, 1.00),
(2112, 29, 25, 0.00),
(2113, 30, 25, 0.00),
(2114, 31, 25, 1.00),
(2115, 39, 25, 0.00),
(2116, 40, 25, 0.00),
(2117, 41, 25, 0.00),
(2118, 42, 25, 1.00),
(2119, 43, 25, 0.95),
(2120, 44, 25, 0.00),
(2121, 45, 25, 0.13),
(2122, 46, 25, 0.02),
(2123, 47, 25, 1.00),
(2124, 48, 25, 0.00),
(2125, 49, 25, 1.00),
(2126, 50, 25, 0.00),
(2127, 51, 25, 0.00),
(2128, 3, 26, 0.50),
(2129, 6, 26, 0.06),
(2130, 8, 26, 0.00),
(2131, 9, 26, 0.00),
(2132, 10, 26, 0.00),
(2133, 11, 26, 0.37),
(2134, 12, 26, 0.00),
(2135, 13, 26, 0.00),
(2136, 14, 26, 0.00),
(2137, 15, 26, 0.00),
(2138, 16, 26, 0.00),
(2139, 17, 26, 0.00),
(2140, 18, 26, 1.00),
(2141, 19, 26, 0.00),
(2142, 20, 26, 0.50),
(2143, 21, 26, 1.00),
(2144, 22, 26, 0.50),
(2145, 23, 26, 1.00),
(2146, 24, 26, 0.99),
(2147, 25, 26, 0.01),
(2148, 26, 26, 1.00),
(2149, 27, 26, 0.00),
(2150, 28, 26, 0.00),
(2151, 29, 26, 0.00),
(2152, 30, 26, 0.00),
(2153, 31, 26, 0.99),
(2154, 39, 26, 1.00),
(2155, 40, 26, 0.00),
(2156, 41, 26, 0.79),
(2157, 42, 26, 0.00),
(2158, 43, 26, 0.98),
(2159, 44, 26, 0.00),
(2160, 45, 26, 1.00),
(2161, 46, 26, 0.00),
(2162, 47, 26, 0.33),
(2163, 48, 26, 0.00),
(2164, 49, 26, 1.00),
(2165, 50, 26, 0.00),
(2166, 51, 26, 0.00),
(2206, 3, 28, 0.00),
(2207, 6, 28, 1.00),
(2208, 8, 28, 0.00),
(2209, 9, 28, 0.00),
(2210, 10, 28, 0.00),
(2211, 11, 28, 0.00),
(2212, 12, 28, 1.00),
(2213, 13, 28, 0.01),
(2214, 14, 28, 0.00),
(2215, 15, 28, 0.00),
(2216, 16, 28, 1.00),
(2217, 17, 28, 1.00),
(2218, 18, 28, 0.00),
(2219, 19, 28, 0.00),
(2220, 20, 28, 0.75),
(2221, 21, 28, 0.02),
(2222, 22, 28, 0.50),
(2223, 23, 28, 0.00),
(2224, 24, 28, 0.00),
(2225, 25, 28, 0.90),
(2226, 26, 28, 0.00),
(2227, 27, 28, 0.00),
(2228, 28, 28, 1.00),
(2229, 29, 28, 1.00),
(2230, 30, 28, 0.00),
(2231, 31, 28, 1.00),
(2232, 39, 28, 0.64),
(2233, 40, 28, 0.00),
(2234, 41, 28, 1.00),
(2235, 42, 28, 0.00),
(2236, 43, 28, 0.00),
(2237, 44, 28, 0.96),
(2238, 45, 28, 0.98),
(2239, 46, 28, 0.00),
(2240, 47, 28, 0.02),
(2241, 48, 28, 0.86),
(2242, 49, 28, 1.00),
(2243, 50, 28, 0.00),
(2244, 51, 28, 0.00),
(2245, 3, 29, 0.00),
(2246, 6, 29, 0.75),
(2247, 8, 29, 0.96),
(2248, 9, 29, 0.00),
(2249, 10, 29, 0.00),
(2250, 11, 29, 0.00),
(2251, 12, 29, 0.00),
(2252, 13, 29, 0.00),
(2253, 14, 29, 1.00),
(2254, 15, 29, 0.00),
(2255, 16, 29, 0.00),
(2256, 17, 29, 1.00),
(2257, 18, 29, 0.00),
(2258, 19, 29, 0.00),
(2259, 20, 29, 0.00),
(2260, 21, 29, 0.00),
(2261, 22, 29, 0.50),
(2262, 23, 29, 0.00),
(2263, 24, 29, 0.00),
(2264, 25, 29, 0.94),
(2265, 26, 29, 0.00),
(2266, 27, 29, 0.00),
(2267, 28, 29, 1.00),
(2268, 29, 29, 1.00),
(2269, 30, 29, 0.00),
(2270, 31, 29, 1.00),
(2271, 39, 29, 0.00),
(2272, 40, 29, 0.00),
(2273, 41, 29, 1.00),
(2274, 42, 29, 0.00),
(2275, 43, 29, 0.92),
(2276, 44, 29, 0.00),
(2277, 45, 29, 0.94),
(2278, 46, 29, 0.00),
(2279, 47, 29, 1.00),
(2280, 48, 29, 0.00),
(2281, 49, 29, 1.00),
(2282, 50, 29, 0.00),
(2283, 51, 29, 0.00),
(2323, 3, 31, 0.99),
(2324, 6, 31, 0.00),
(2325, 8, 31, 0.00),
(2326, 9, 31, 0.00),
(2327, 10, 31, 0.00),
(2328, 11, 31, 0.76),
(2329, 12, 31, 0.00),
(2330, 13, 31, 0.00),
(2331, 14, 31, 0.00),
(2332, 15, 31, 0.00),
(2333, 16, 31, 0.00),
(2334, 17, 31, 1.00),
(2335, 18, 31, 0.00),
(2336, 19, 31, 0.00),
(2337, 20, 31, 0.85),
(2338, 21, 31, 0.00),
(2339, 22, 31, 0.50),
(2340, 23, 31, 1.00),
(2341, 24, 31, 0.99),
(2342, 25, 31, 0.01),
(2343, 26, 31, 1.00),
(2344, 27, 31, 0.00),
(2345, 28, 31, 0.00),
(2346, 29, 31, 0.00),
(2347, 30, 31, 0.00),
(2348, 31, 31, 0.02),
(2349, 39, 31, 0.00),
(2350, 40, 31, 0.94),
(2351, 41, 31, 0.99),
(2352, 42, 31, 0.00),
(2353, 43, 31, 0.00),
(2354, 44, 31, 1.00),
(2355, 45, 31, 0.00),
(2356, 46, 31, 0.93),
(2357, 47, 31, 0.24),
(2358, 48, 31, 0.00),
(2359, 49, 31, 1.00),
(2360, 50, 31, 0.00),
(2361, 51, 31, 0.00),
(2362, 3, 15, 0.92),
(2363, 6, 15, 0.00),
(2364, 8, 15, 0.00),
(2365, 9, 15, 0.00),
(2366, 10, 15, 0.00),
(2367, 11, 15, 0.00),
(2368, 12, 15, 1.00),
(2369, 13, 15, 0.00),
(2370, 14, 15, 0.00),
(2371, 15, 15, 0.00),
(2372, 16, 15, 0.00),
(2373, 17, 15, 1.00),
(2374, 18, 15, 0.00),
(2375, 19, 15, 0.00),
(2376, 20, 15, 0.00),
(2377, 21, 15, 9.99),
(2378, 22, 15, 0.50),
(2379, 23, 15, 0.00),
(2380, 24, 15, 0.86),
(2381, 25, 15, 0.02),
(2382, 26, 15, 0.00),
(2383, 27, 15, 1.00),
(2384, 28, 15, 0.00),
(2385, 29, 15, 0.00),
(2386, 30, 15, 0.00),
(2387, 31, 15, 1.00),
(2388, 39, 15, 0.00),
(2389, 40, 15, 0.00),
(2390, 41, 15, 0.00),
(2391, 42, 15, 1.00),
(2392, 43, 15, 0.00),
(2393, 44, 15, 0.93),
(2394, 45, 15, 0.56),
(2395, 46, 15, 0.00),
(2396, 47, 15, 0.27),
(2397, 48, 15, 0.00),
(2398, 49, 15, 0.96),
(2399, 50, 15, 0.00),
(2400, 51, 15, 0.00),
(2401, 3, 8, 0.97),
(2402, 6, 8, 0.00),
(2403, 8, 8, 0.00),
(2404, 9, 8, 0.00),
(2405, 10, 8, 0.00),
(2406, 11, 8, 0.29),
(2407, 12, 8, 0.20),
(2408, 13, 8, 0.00),
(2409, 14, 8, 0.00),
(2410, 15, 8, 0.00),
(2411, 16, 8, 0.00),
(2412, 17, 8, 1.00),
(2413, 18, 8, 0.00),
(2414, 19, 8, 0.00),
(2415, 20, 8, 0.00),
(2416, 21, 8, 0.03),
(2417, 22, 8, 0.50),
(2418, 23, 8, 0.00),
(2419, 24, 8, 0.96),
(2420, 25, 8, 0.01),
(2421, 26, 8, 0.00),
(2422, 27, 8, 0.00),
(2423, 28, 8, 0.42),
(2424, 29, 8, 0.00),
(2425, 30, 8, 0.00),
(2426, 31, 8, 1.00),
(2427, 39, 8, 0.00),
(2428, 40, 8, 0.00),
(2429, 41, 8, 0.00),
(2430, 42, 8, 0.99),
(2431, 43, 8, 0.00),
(2432, 44, 8, 0.56),
(2433, 45, 8, 0.89),
(2434, 46, 8, 0.00),
(2435, 47, 8, 0.13),
(2436, 48, 8, 0.02),
(2437, 49, 8, 1.00),
(2438, 50, 8, 0.00),
(2439, 51, 8, 0.00),
(2440, 3, 30, 0.65),
(2441, 6, 30, 0.03),
(2442, 8, 30, 0.00),
(2443, 9, 30, 0.00),
(2444, 10, 30, 0.00),
(2445, 11, 30, 0.00),
(2446, 12, 30, 1.00),
(2447, 13, 30, 0.00),
(2448, 14, 30, 0.00),
(2449, 15, 30, 0.00),
(2450, 16, 30, 0.00),
(2451, 17, 30, 0.50),
(2452, 18, 30, 0.50),
(2453, 19, 30, 0.00),
(2454, 20, 30, 0.00),
(2455, 21, 30, 0.00),
(2456, 22, 30, 0.50),
(2457, 23, 30, 1.00),
(2458, 24, 30, 0.99),
(2459, 25, 30, 0.01),
(2460, 26, 30, 0.00),
(2461, 27, 30, 0.00),
(2462, 28, 30, 1.00),
(2463, 29, 30, 1.00),
(2464, 30, 30, 0.00),
(2465, 31, 30, 1.00),
(2466, 39, 30, 1.00),
(2467, 40, 30, 0.00),
(2468, 41, 30, 1.00),
(2469, 42, 30, 0.00),
(2470, 43, 30, 0.00),
(2471, 44, 30, 0.53),
(2472, 45, 30, 0.99),
(2473, 46, 30, 0.00),
(2474, 47, 30, 0.98),
(2475, 48, 30, 0.00),
(2476, 49, 30, 1.00),
(2477, 50, 30, 0.00),
(2478, 51, 30, 0.00),
(2479, 3, 32, 0.00),
(2480, 6, 32, 1.00),
(2481, 8, 32, 0.00),
(2482, 9, 32, 0.00),
(2483, 10, 32, 0.00),
(2484, 11, 32, 0.64),
(2485, 12, 32, 0.00),
(2486, 13, 32, 0.00),
(2487, 14, 32, 0.00),
(2488, 15, 32, 0.00),
(2489, 16, 32, 0.00),
(2490, 17, 32, 0.00),
(2491, 18, 32, 1.00),
(2492, 19, 32, 0.00),
(2493, 20, 32, 1.00),
(2494, 21, 32, 0.00),
(2495, 22, 32, 0.50),
(2496, 23, 32, 0.00),
(2497, 24, 32, 0.96),
(2498, 25, 32, 0.01),
(2499, 26, 32, 0.00),
(2500, 27, 32, 1.00),
(2501, 28, 32, 0.00),
(2502, 29, 32, 0.00),
(2503, 30, 32, 0.00),
(2504, 31, 32, 0.99),
(2505, 39, 32, 1.00),
(2506, 40, 32, 0.00),
(2507, 41, 32, 1.00),
(2508, 42, 32, 0.00),
(2509, 43, 32, 0.72),
(2510, 44, 32, 0.01),
(2511, 45, 32, 1.00),
(2512, 46, 32, 0.00),
(2513, 47, 32, 1.00),
(2514, 48, 32, 0.00),
(2515, 49, 32, 0.99),
(2516, 50, 32, 0.00),
(2517, 51, 32, 0.00),
(2518, 3, 5, 0.00),
(2519, 6, 5, 0.00),
(2520, 8, 5, 0.00),
(2521, 9, 5, 0.89),
(2522, 10, 5, 0.02),
(2523, 11, 5, 0.00),
(2524, 12, 5, 0.00),
(2525, 13, 5, 0.00),
(2526, 14, 5, 0.00),
(2527, 15, 5, 1.00),
(2528, 16, 5, 0.00),
(2529, 17, 5, 0.00),
(2530, 18, 5, 0.00),
(2531, 19, 5, 1.00),
(2532, 20, 5, 0.00),
(2533, 21, 5, 0.00),
(2534, 22, 5, 0.50),
(2535, 23, 5, 0.00),
(2536, 24, 5, 0.00),
(2537, 25, 5, 1.00),
(2538, 26, 5, 0.00),
(2539, 27, 5, 0.00),
(2540, 28, 5, 1.00),
(2541, 29, 5, 0.00),
(2542, 30, 5, 1.00),
(2543, 31, 5, 1.00),
(2544, 39, 5, 0.00),
(2545, 40, 5, 0.00),
(2546, 41, 5, 0.00),
(2547, 42, 5, 0.00),
(2548, 43, 5, 0.00),
(2549, 44, 5, 1.00),
(2550, 45, 5, 0.00),
(2551, 46, 5, 1.00),
(2552, 47, 5, 0.00),
(2553, 48, 5, 1.00),
(2554, 49, 5, 0.00),
(2555, 50, 5, 0.00),
(2556, 51, 5, 1.00),
(2557, 3, 27, 0.01),
(2558, 6, 27, 0.99),
(2559, 8, 27, 0.00),
(2560, 9, 27, 0.00),
(2561, 10, 27, 0.00),
(2562, 11, 27, 0.00),
(2563, 12, 27, 0.00),
(2564, 13, 27, 0.98),
(2565, 14, 27, 0.00),
(2566, 15, 27, 0.00),
(2567, 16, 27, 0.00),
(2568, 17, 27, 1.00),
(2569, 18, 27, 0.00),
(2570, 19, 27, 0.00),
(2571, 20, 27, 0.35),
(2572, 21, 27, 9.99),
(2573, 22, 27, 0.50),
(2574, 23, 27, 0.00),
(2575, 24, 27, 0.86),
(2576, 25, 27, 0.02),
(2577, 26, 27, 0.00),
(2578, 27, 27, 1.00),
(2579, 28, 27, 0.00),
(2580, 29, 27, 0.00),
(2581, 30, 27, 0.00),
(2582, 31, 27, 1.00),
(2583, 39, 27, 0.99),
(2584, 40, 27, 0.00),
(2585, 41, 27, 1.00),
(2586, 42, 27, 0.00),
(2587, 43, 27, 0.05),
(2588, 44, 27, 0.11),
(2589, 45, 27, 0.80),
(2590, 46, 27, 0.00),
(2591, 47, 27, 0.40),
(2592, 48, 27, 0.00),
(2593, 49, 27, 1.00),
(2594, 50, 27, 0.00),
(2595, 51, 27, 0.00),
(2596, 3, 33, 0.81),
(2597, 6, 33, 0.01),
(2598, 8, 33, 0.00),
(2599, 9, 33, 0.00),
(2600, 10, 33, 0.00),
(2601, 11, 33, 0.29),
(2602, 12, 33, 0.20),
(2603, 13, 33, 0.00),
(2604, 14, 33, 0.00),
(2605, 15, 33, 0.00),
(2606, 16, 33, 0.00),
(2607, 17, 33, 1.00),
(2608, 18, 33, 0.00),
(2609, 19, 33, 0.00),
(2610, 20, 33, 0.60),
(2611, 21, 33, 0.16),
(2612, 22, 33, 0.50),
(2613, 23, 33, 1.00),
(2614, 24, 33, 0.99),
(2615, 25, 33, 0.01),
(2616, 26, 33, 0.00),
(2617, 27, 33, 1.00),
(2618, 28, 33, 0.00),
(2619, 29, 33, 0.00),
(2620, 30, 33, 0.00),
(2621, 31, 33, 0.00),
(2622, 39, 33, 0.00),
(2623, 40, 33, 1.00),
(2624, 41, 33, 0.00),
(2625, 42, 33, 0.81),
(2626, 43, 33, 0.00),
(2627, 44, 33, 0.33),
(2628, 45, 33, 0.00),
(2629, 46, 33, 1.00),
(2630, 47, 33, 0.09),
(2631, 48, 33, 0.04),
(2632, 49, 33, 1.00),
(2633, 50, 33, 0.00),
(2634, 51, 33, 0.00),
(2809, 58, 4, 0.00),
(2810, 58, 5, 0.00),
(2811, 58, 6, 0.00),
(2812, 58, 7, 0.75),
(2813, 58, 8, 0.17),
(2814, 58, 9, 0.00),
(2815, 58, 10, 0.00),
(2816, 58, 11, 0.00),
(2817, 58, 12, 0.00),
(2818, 58, 13, 0.50),
(2819, 58, 15, 1.00),
(2820, 58, 16, 1.00),
(2821, 58, 17, 0.00),
(2822, 58, 18, 0.00),
(2823, 58, 19, 0.00),
(2824, 58, 20, 0.00),
(2825, 58, 21, 0.00),
(2826, 58, 22, 0.00),
(2827, 58, 23, 0.00),
(2828, 58, 24, 0.00),
(2829, 58, 25, 0.00),
(2830, 58, 26, 0.00),
(2831, 58, 27, 0.00),
(2832, 58, 28, 0.00),
(2833, 58, 29, 0.00),
(2834, 58, 30, 0.00),
(2835, 58, 31, 0.00),
(2836, 58, 32, 0.00),
(2837, 58, 33, 0.20);

-- 
-- Вывод данных для таблицы cities
--
INSERT INTO cities VALUES
(1, 'Сочи'),
(2, 'Туапсе'),
(3, 'Геленджик'),
(4, 'Новороссийск'),
(5, 'Анапа'),
(6, 'Ялта'),
(7, 'Большая Алушта'),
(9, 'Адлер'),
(10, 'П.Г.Т. Красная поляна');

-- 
-- Вывод данных для таблицы func_own
--
INSERT INTO func_own VALUES
(1, 'Треугольная'),
(2, 'Трапецевидная'),
(3, 'Простая Гаусса'),
(4, 'Двухсторонняя Гаусса'),
(5, 'Обобщенный колокол'),
(6, 'Сигмоидная'),
(7, 'Сигмоидная дополнительная'),
(8, 'Дополнительная дополнительная несемметричная');

-- 
-- Вывод данных для таблицы ling_term
--
INSERT INTO ling_term VALUES
(3, 'Дешевая', 6, 1, -0.00600, 1800.00000, NULL, NULL),
(6, 'Средняя', 7, 1, 0.00900, 2100.00000, 0.00550, 5600.00000),
(8, 'Дорогая', 8, 1, 0.00450, 4700.00000, -0.00100, 20260.00000),
(9, 'Элитное', 8, 1, 0.00220, 21000.00000, -0.00022, 64000.00000),
(10, 'Супер-элитное', 6, 1, 0.00020, 75000.00000, NULL, NULL),
(11, 'Малая', 2, 3, 0.00000, 0.00000, 13.80000, 39.60000),
(12, 'Средняя', 2, 3, 30.00000, 40.00000, 50.00000, 70.00000),
(13, 'Большая', 7, 3, 0.50000, 58.50000, 0.18000, 110.50000),
(14, 'Элитная', 7, 3, 0.29000, 110.00000, 0.15000, 202.00000),
(15, 'Супер-элитное', 6, 3, 0.09110, 245.40000, NULL, NULL),
(16, 'Отсутствует', 1, 2, -1.00000, 0.00000, 0.00000, NULL),
(17, 'Маленькая', 2, 2, -1.00000, 0.00000, 6.00000, 8.00000),
(18, 'Средняя', 2, 2, 6.00000, 8.00000, 12.00000, 15.00000),
(19, 'Большая', 6, 2, 1.00000, 19.00000, NULL, NULL),
(20, 'Малая', 2, 4, -2.00000, 0.00000, 10.00000, 30.00000),
(21, 'Средняя', 5, 4, 10.00000, 5.00000, 30.00000, NULL),
(22, 'Большая', 6, 4, 0.00000, 2.65000, NULL, NULL),
(23, 'Первый этаж', 2, 12, -1.00000, 0.00000, 1.00000, 1.00000),
(24, 'Низко', 6, 12, -1.34000, 4.34000, NULL, NULL),
(25, 'Высоко', 6, 12, 0.57000, 10.20000, NULL, NULL),
(26, 'Малоэтажные', 2, 11, -1.00000, 0.00000, 2.00000, 3.00000),
(27, 'Средняя', 2, 11, 2.00000, 3.00000, 5.00000, 6.00000),
(28, 'Многоэтажные', 6, 11, 6.57000, 6.04800, NULL, NULL),
(29, 'Повышенной этажности', 2, 11, 10.00000, 11.00000, 16.00000, 17.00000),
(30, 'Высокоэтажные', 6, 11, 2.68000, 17.41000, NULL, NULL),
(31, 'Пешком', 7, 6, 0.02750, -169.00000, 0.02000, 687.00000),
(39, 'У моря', 6, 6, -0.11200, 139.00000, NULL, NULL),
(40, 'Далеко', 6, 6, 0.01560, 711.00000, NULL, NULL),
(41, 'Близко', 6, 10, -0.03260, 330.00000, NULL, NULL),
(42, 'Далеко', 6, 10, 0.02600, 494.00000, NULL, NULL),
(43, 'Пешком', 6, 8, -0.03560, 150.00000, NULL, NULL),
(44, 'На машине', 6, 8, 0.02100, 334.00000, NULL, NULL),
(45, 'Пешком', 6, 5, -0.01170, 477.00000, NULL, NULL),
(46, 'На машине', 6, 5, 0.01970, 844.00000, NULL, NULL),
(47, 'Близко', 6, 7, -0.01470, 621.00000, NULL, NULL),
(48, 'Далеко', 6, 7, 0.04100, 855.00000, NULL, NULL),
(49, 'Низко', 6, 9, -0.04530, 122.00000, NULL, NULL),
(50, 'Высоко', 5, 9, 118.00000, 5.86000, 283.00000, NULL),
(51, 'В горах', 6, 9, 0.04000, 441.00000, NULL, NULL),
(58, 'Около 1 400', 1, 1, 1200.00000, 1400.00000, 1600.00000, NULL);

-- 
-- Вывод данных для таблицы ling_var
--
INSERT INTO ling_var VALUES
(1, 'Цена', 0, 0),
(2, 'Площадь кухни', 0, 0),
(3, 'Общая площадь', 0, 0),
(4, 'Жилая  полощадь', 0, 0),
(5, 'Расстояние до пляжа', 0, 0),
(6, 'Расстояние до моря', 0, 0),
(7, 'Расстояние до школы', 0, 0),
(8, 'Расстояние до магазина', 0, 0),
(9, 'Высота над уровнем моря', 0, 0),
(10, 'Рассотяние до остановки', 0, 0),
(11, 'Этажность здания', 0, 0),
(12, 'Этаж', 0, 0);

-- 
-- Вывод данных для таблицы migration
--
INSERT INTO migration VALUES
('m000000_000000_base', 1517819366),
('m180205_083213_create_user_table', 1517839952);

-- 
-- Вывод данных для таблицы object
--
INSERT INTO object VALUES
(4, 10, 24, '6', '0', 0, 5250, 62, 50, 12, 1, 4, 1, 1, 2, 0, 33500, 41700, 178, 254, 563, 495, 0, 'Продам квартиру в новом Жилом Комплексе. Двухкомнатная квартира, площадь которой 62 кв. м. Балкон с видом на заснеженные вершины гор. Подведено спутниковое ТВ и интернет. Коммуникации центральные, отопление от индивидуального газового котла. Сам \r\nдом является Компактным 4-х этажным жилым комплексом с мансардой и цоколем, выполненный в спокойном альпийском стиле, класс застройки — бизнес. Дом расположен в центре поселка Красная поляна, на улице Вознесенской (Адлерский район). До моря 32000 метров. Дом имеет форму классического шале, внешняя отделка здания также поддерживает этот стиль. На фасаде комплекса гармонично сочетаются декоративная штукатурка, природный камень и элементы из дерева. Монолитный каркас служит практичным и надежным основанием здания. Цокольный этаж комплекса занимает подземная парковка. \r\n'),
(5, 2, 6, '3', '0', 0, 54646, 690, 430, 100, 23, 40, 12, 0, 4, 1, 321, 4221, 1412, 123123, 1233, 1241, 0, 'цуацуацуацуацацацуа'),
(6, 9, 25, '104б', '0', 0, 2800, 55, 49, 6, 7, 10, 1, 1, 2, 0, 50, 30, 425, 380, 270, 1, 1, 'Хорошее место для отдыха'),
(7, 9, 25, '12', '0', 0, 1450, 38, 33, 5, 22, 5, 1, 1, 2, 0, 556, 563, 118, 250, 404, 3, 0, 'так себе'),
(8, 9, 25, '56', '0', 0, 1234, 32, 44, 4, 2, 6, 2, 1, 1, 1, 300, 300, 345, 686, 753, 2, 0, 'dfsdafdfs'),
(9, 9, 27, '67', '0', 0, 7180, 134, 89, 18, 7, 10, 2, 2, 5, 2, 790, 865, 675, 678, 857, 37, 0, 'Элитное здание'),
(10, 9, 28, '12', '0', 0, 12500, 156, 100, 32, 10, 15, 3, 2, 6, 2, 1679, 1975, 268, 523, 753, 70, 1, 'Суперэлиное'),
(11, 9, 28, '54', '0', 0, 1700, 47, 32, 6, 4, 5, 1, 2, 2, 1, 2564, 2745, 680, 198, 793, 67, 0, 'неплохо если не на море'),
(12, 9, 27, '98', '0', 0, 2300, 56, 42, 8, 5, 5, 1, 2, 3, 1, 945, 1198, 167, 180, 345, 3, 0, 'приятное место'),
(13, 9, 27, '67', '0', 0, 1300, 29, 17, 5, 1, 4, 1, 1, 1, 0, 1234, 1346, 543, 242, 564, 4, 0, 'дешево иплохо'),
(15, 9, 27, '35', '0', 0, 1400, 42, 37, 4, 3, 5, 0, 0, 2, 0, 324, 456, 455, 780, 690, 50, 0, 'ergergergergerg'),
(16, 9, 27, '35б', '0', 0, 1400, 42, 37, 4, 7, 10, 0, 1, 2, 0, 224, 234, 100, 256, 456, 1, 1, 'rgergerg'),
(17, 9, 25, '3', '0', 0, 12800, 142, 77, 25, 6, 15, 2, 2, 5, 2, 90, 123, 455, 25, 700, 2, 1, 'trg'),
(18, 9, 27, '3б', '0', 0, 2500, 56, 27, 8, 3, 4, 1, 1, 3, 1, 489, 563, 234, 700, 235, 3, 0, 'rgergurerg'),
(19, 9, 28, '87', '0', 0, 3700, 93, 68, 3, 1, 5, 1, 1, 3, 0, 736, 894, 780, 78, 890, 10, 0, 'rgerrgerg'),
(20, 9, 25, '1', '0', 0, 1930, 31, 25, 6, 2, 5, 1, 1, 2, 1, 295, 369, 560, 320, 500, 3, 1, 'rgerygreerg'),
(21, 9, 27, '6', '0', 0, 2600, 80, 68, 12, 6, 10, 1, 0, 3, 0, 300, 373, 380, 145, 230, 5, 1, 'rgertgerg'),
(22, 9, 28, '9', '0', 0, 2000, 50, 42, 6, 1, 5, 1, 0, 2, 0, 990, 974, 784, 56, 1270, 12, 0, 'rgerrgerg'),
(23, 9, 28, '77', '0', 0, 4800, 67, 60, 8, 5, 9, 1, 1, 3, 2, 832, 1680, 80, 90, 2350, 67, 0, 'rgertwuerg'),
(24, 9, 28, '2', '0', 0, 1900, 30, 24, 6, 2, 5, 1, 0, 2, 0, 545, 965, 480, 345, 250, 23, 0, 'rgerguerg'),
(25, 9, 27, '23', '0', 0, 5300, 80, 60, 12, 8, 9, 1, 0, 3, 1, 345, 638, 70, 785, 178, 2, 0, 'rgergerg'),
(26, 9, 25, '86а', '0', 0, 1800, 30, 20, 10, 1, 1, 1, 0, 2, 0, 17, 23, 35, 289, 670, 1, 1, 'rgereergerg'),
(27, 9, 27, '64', '0', 0, 2600, 90, 23, 2, 3, 5, 2, 2, 4, 1, 100, 361, 234, 67, 649, 2, 0, 'rgeryergerg'),
(28, 9, 25, '7а', '0', 0, 3000, 50, 15, 0, 14, 15, 1, 0, 2, 0, 134, 142, 490, 60, 900, 1, 1, 'rgergrtuerg'),
(29, 9, 25, '15', '0', 0, 5400, 145, 89, 6, 15, 15, 2, 2, 5, 0, 231, 234, 80, 35, 230, 3, 1, 'rgerguerg'),
(30, 9, 25, '14', '0', 0, 1700, 47, 64, 7, 1, 15, 1, 1, 2, 1, 60, 86, 340, 100, 370, 2, 1, 'rgerrrgerg'),
(31, 9, 27, '14б', '0', 0, 1100, 20, 13, 6, 1, 1, 0, 1, 1, 0, 889, 974, 764, 180, 700, 5, 0, 'rgeerguerg'),
(32, 2, 6, '54', '0', 2, 3000, 23, 2, 12, 2, 3, 4, 2, 3, 2, 2, 3, 124, 123, 232, 21, 1, ''),
(33, 2, 29, '66', '0', 0, 1560, 32, 18, 6, 1, 5, 1, 1, 2, 0, 1500, 1600, 300, 550, 775, 5, 0, '');

-- 
-- Вывод данных для таблицы streets
--
INSERT INTO streets VALUES
(1, 'Титова', 1),
(2, 'ул. Орджоникидзе', 1),
(3, 'ул. Несебрская', 1),
(4, 'пр. Курортный', 1),
(5, '8 марта', 2),
(6, 'Горького', 2),
(24, 'Вознесенская', 10),
(25, 'ул. Просвещения', 9),
(26, 'ул. Мира', 1),
(27, 'ул. Мира', 9),
(28, 'ул. Пригорная', 9),
(29, 'ул. Мира', 2);

-- 
-- Вывод данных для таблицы user
--
INSERT INTO user VALUES
(1, 'kia', '', '$2y$13$GmY71PVMmvCbxLpAgfPgP.X7BC76nrSGs3atDDpX7HsJxyw/DrMNm', NULL, 'rewrfew@mail.ru', 10, 0, 1520800862, NULL),
(2, 'gereh', 'UNWhNRhKtzk_ftz6yQESQbk1ftcgb6T7', '$2y$13$C33nk6VN81WkPlwJ6yaUNOpcwwrRHPPEUxC8QKpk94Qtw2ezsfSuW', 'DI_6WJKAJLcrIqnsGEr0s6W24lRwZN2T_1525698020', '917848@mail.ru', 10, 1517841005, 1525698020, NULL),
(3, 'admin', '7t21YNH6IxCr5DHe6WQCl_jONyJvGgma', '$2y$13$zprxAzY0GWEVlqPK7EYd5eLG4.NisIUBNY7O9YlBOwfkkpp5DHku2', NULL, 'admin@admin.f', 10, 1518560428, 1518560428, NULL),
(4, 'Green', 'P_D7RakYbdpxI2kXaTEP3jrbSVWLgUCH', '$2y$13$ftDxilucQyRDYl270mr5HOma67nJD/XtCqQC2/C0nDZ/IpxLBTg2m', NULL, '91124@mail.ru', 10, 1518561349, 1518561349, NULL),
(5, 'login', 'e_bIpbiU8FfRCwMqVuyr56WPK5DAdN6P', '$2y$13$YvBBL/waGRS4Fza2FVaPfev5bpUtiuPsjNcYCnQqzsZiBwkz4Qq4K', NULL, '123456@mail.ru', 10, 1518564621, 1518564621, 'ваауау ауупуп пуупуп'),
(6, 'egor', 'Lp0E_zpgfzPvb9ep11olVkOL3f3UnJCo', '$2y$13$u36yDy2/xqTswyCwr9BrheuV/0wTMtOOZn7ZLkLpxABR2E7Xpbpr6', NULL, '911@mail.ru', 10, 1525681210, 1525681210, 'sffsdfsdgsdg'),
(7, 'green123', 'uEl3Ej9sDOfSwCoq7ROcFMvKpcRu0VoL', '$2y$13$KpBZQmCwvvPG07W/0kPBeusJ.qv/F/0d2H/vpdX.3jBLcTAkqS67a', NULL, '12345678@mail.ru', 10, 1526273054, 1526273054, 'Иванов Иван Иванович');

--
-- Установка базы данных по умолчанию
--
USE rieltfirm;

DELIMITER $$

--
-- Удалить триггер "update_term"
--
DROP TRIGGER IF EXISTS update_term$$

--
-- Удалить триггер "update_obj"
--
DROP TRIGGER IF EXISTS update_obj$$

--
-- Удалить триггер "insert_term"
--
DROP TRIGGER IF EXISTS insert_term$$

--
-- Удалить триггер "insert_obj"
--
DROP TRIGGER IF EXISTS insert_obj$$

DELIMITER ;

--
-- Установка базы данных по умолчанию
--
USE rieltfirm;

DELIMITER $$

--
-- Создать триггер "insert_obj"
--
CREATE
DEFINER = 'root'@'%'
TRIGGER insert_obj
AFTER INSERT
ON object
FOR EACH ROW
BEGIN
  DECLARE id_term_cur,
          id_ling_var_cur,
          id_fun_own_cur int UNSIGNED;
  DECLARE a_cur,
          b_cur,
          c_cur,
          d_cur decimal(15, 5);
  DECLARE done int DEFAULT 0;
  DECLARE mu decimal(3, 2);
  DECLARE cur CURSOR FOR
  SELECT
    lt.id,
    lt.id_func_own,
    lt.id_ling_var,
    lt.a,
    lt.b,
    lt.c,
    lt.d
  FROM ling_term lt;
  DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
  OPEN cur;
  FETCH cur INTO id_term_cur, id_fun_own_cur, id_ling_var_cur, a_cur, b_cur, c_cur, d_cur;
  WHILE done = 0 DO
    CASE id_ling_var_cur
      WHEN 1 THEN BEGIN
          SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.price);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (id_term_cur, NEW.id, mu);
        END;
      WHEN 2 THEN BEGIN
          SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.size_kitchen);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (id_term_cur, NEW.id, mu);
        END;
      WHEN 3 THEN BEGIN
          SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.size_amount);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (id_term_cur, NEW.id, mu);
        END;
      WHEN 4 THEN BEGIN
          SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.size_life);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (id_term_cur, NEW.id, mu);
        END;
      WHEN 5 THEN BEGIN
          IF NEW.distance_to_beach THEN
            SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.distance_to_beach);
            INSERT INTO belong (id_ling_term, id_object, own)
              VALUES (id_term_cur, NEW.id, mu);
          END IF;
        END;
      WHEN 6 THEN BEGIN
          IF NEW.distance_to_sea THEN
            SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.distance_to_sea);
            INSERT INTO belong (id_ling_term, id_object, own)
              VALUES (id_term_cur, NEW.id, mu);
          END IF;
        END;
      WHEN 7 THEN BEGIN
          IF NEW.distance_school THEN

            SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.distance_school);
            INSERT INTO belong (id_ling_term, id_object, own)
              VALUES (id_term_cur, NEW.id, mu);
          END IF;
        END;
      WHEN 8 THEN BEGIN
          IF NEW.distance_to_shop THEN

            SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.distance_to_shop);
            INSERT INTO belong (id_ling_term, id_object, own)
              VALUES (id_term_cur, NEW.id, mu);
          END IF;
        END;
      WHEN 9 THEN BEGIN
          IF NEW.hight_on_sea THEN

            SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.hight_on_sea);
            INSERT INTO belong (id_ling_term, id_object, own)
              VALUES (id_term_cur, NEW.id, mu);
          END IF;
        END;
      WHEN 10 THEN BEGIN
          IF NEW.distance_to_bus_stop THEN

            SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.distance_to_bus_stop);
            INSERT INTO belong (id_ling_term, id_object, own)
              VALUES (id_term_cur, NEW.id, mu);
          END IF;
        END;
      WHEN 11 THEN BEGIN
          SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.home_floors);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (id_term_cur, NEW.id, mu);
        END;
      WHEN 12 THEN BEGIN
          SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.floor);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (id_term_cur, NEW.id, mu);
        END;
    END CASE;
    FETCH cur INTO id_term_cur, id_fun_own_cur, id_ling_var_cur, a_cur, b_cur, c_cur, d_cur;
  END WHILE;
END
$$

--
-- Создать триггер "insert_term"
--
CREATE
DEFINER = 'root'@'%'
TRIGGER insert_term
AFTER INSERT
ON ling_term
FOR EACH ROW
BEGIN
  DECLARE x_cur int;
  DECLARE id_cur int UNSIGNED; -- id объекта
  DECLARE done int DEFAULT 0; -- число для переменной
  DECLARE mu decimal(3, 2); -- степень принадлежности
  CASE NEW.id_ling_var
    WHEN 1 THEN -- ЦЕНА
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.price
        FROM object o;-- курсор по параметру
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;-- для остановки цикла, при выходе за пределы курсора
        OPEN cur; -- открытие курсора
        FETCH cur INTO id_cur, x_cur; -- выборка первой строки
        WHILE done = 0 DO  -- пока не вышла за пределы
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur); -- по функции рачитывается степ. принадл.
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);-- сохраняем терма, обьект,степ.принадл.
          FETCH cur INTO id_cur, x_cur; -- идем к след объекту
        END WHILE;
      END;
    WHEN 2 THEN -- ПЛОЩАДЬ КУХНИ
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.size_kitchen
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 3 THEN -- ОБЩАЯ ПЛОЩАДЬ
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.size_amount
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 4 THEN -- ЖИЛАЯ ПЛОЩАДЬ
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.size_life
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 5 THEN -- РАССТОЯНИЕ ДО ПЛЯЖА
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.distance_to_beach
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 6 THEN -- РАССТОЯНИЕ ДО МОРЯ
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.distance_to_sea
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 7 THEN -- РАССТОЯНИЕ ДО ШКОЛЫ
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.distance_school
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 8 THEN -- РАССТОЯНИЕ ДО МАГАЗИНА
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.distance_to_shop
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 9 THEN -- ВЫСОТА НАД УРОВНЕМ МОРЯ
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.hight_on_sea
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 10 THEN -- РАССТОЯНИЕ ДО ОСТАНОВКИ
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.distance_to_bus_stop
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 11 THEN -- ЭТАЖНОСТЬ ЗДАНИЯ
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.home_floors
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 12 THEN -- ЭТАЖ
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.floor
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
  END CASE;
END
$$

--
-- Создать триггер "update_obj"
--
CREATE
DEFINER = 'root'@'%'
TRIGGER update_obj
AFTER UPDATE
ON object
FOR EACH ROW
BEGIN
  DECLARE id_term_cur,
          id_ling_var_cur,
          id_fun_own_cur int UNSIGNED;
  DECLARE a_cur,
          b_cur,
          c_cur,
          d_cur decimal(15, 5);
  DECLARE done int DEFAULT 0;
  DECLARE mu decimal(3, 2);
  DECLARE cur CURSOR FOR
  SELECT
    lt.id,
    lt.id_func_own,
    lt.id_ling_var,
    lt.a,
    lt.b,
    lt.c,
    lt.d
  FROM ling_term lt;
  DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
  DELETE
    FROM belong
  WHERE belong.id_object = NEW.id; -- удаляем все записи с обьектом
  OPEN cur;
  FETCH cur INTO id_term_cur, id_fun_own_cur, id_ling_var_cur, a_cur, b_cur, c_cur, d_cur;
  WHILE done = 0 DO
    CASE id_ling_var_cur
      WHEN 1 THEN BEGIN
          SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.price);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (id_term_cur, NEW.id, mu);
        END;
      WHEN 2 THEN BEGIN
          SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.size_kitchen);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (id_term_cur, NEW.id, mu);
        END;
      WHEN 3 THEN BEGIN
          SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.size_amount);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (id_term_cur, NEW.id, mu);
        END;
      WHEN 4 THEN BEGIN
          SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.size_life);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (id_term_cur, NEW.id, mu);
        END;
      WHEN 5 THEN BEGIN
          IF NEW.distance_to_beach THEN
            SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.distance_to_beach);
            INSERT INTO belong (id_ling_term, id_object, own)
              VALUES (id_term_cur, NEW.id, mu);
          END IF;
        END;
      WHEN 6 THEN BEGIN
          IF NEW.distance_to_sea THEN
            SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.distance_to_sea);
            INSERT INTO belong (id_ling_term, id_object, own)
              VALUES (id_term_cur, NEW.id, mu);
          END IF;
        END;
      WHEN 7 THEN BEGIN
          IF NEW.distance_school THEN

            SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.distance_school);
            INSERT INTO belong (id_ling_term, id_object, own)
              VALUES (id_term_cur, NEW.id, mu);
          END IF;
        END;
      WHEN 8 THEN BEGIN
          IF NEW.distance_to_shop THEN

            SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.distance_to_shop);
            INSERT INTO belong (id_ling_term, id_object, own)
              VALUES (id_term_cur, NEW.id, mu);
          END IF;
        END;
      WHEN 9 THEN BEGIN
          IF NEW.hight_on_sea THEN

            SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.hight_on_sea);
            INSERT INTO belong (id_ling_term, id_object, own)
              VALUES (id_term_cur, NEW.id, mu);
          END IF;
        END;
      WHEN 10 THEN BEGIN
          IF NEW.distance_to_bus_stop THEN

            SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.distance_to_bus_stop);
            INSERT INTO belong (id_ling_term, id_object, own)
              VALUES (id_term_cur, NEW.id, mu);
          END IF;
        END;
      WHEN 11 THEN BEGIN
          SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.home_floors);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (id_term_cur, NEW.id, mu);
        END;
      WHEN 12 THEN BEGIN
          SET mu = change_fp(id_fun_own_cur, a_cur, b_cur, c_cur, d_cur, NEW.floor);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (id_term_cur, NEW.id, mu);
        END;
    END CASE;
    FETCH cur INTO id_term_cur, id_fun_own_cur, id_ling_var_cur, a_cur, b_cur, c_cur, d_cur;
  END WHILE;
END
$$

--
-- Создать триггер "update_term"
--
CREATE
DEFINER = 'root'@'%'
TRIGGER update_term
AFTER UPDATE
ON ling_term
FOR EACH ROW
BEGIN

  DECLARE x_cur int;
  DECLARE id_cur int UNSIGNED; -- id объекта
  DECLARE done int DEFAULT 0; -- число для переменной
  DECLARE mu decimal(3, 2); -- степень принадлежности
  DELETE
    FROM belong
  WHERE id_ling_term = NEW.id;

  CASE NEW.id_ling_var
    WHEN 1 THEN -- ЦЕНА
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.price
        FROM object o;-- курсор по параметру
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;-- для остановки цикла, при выходе за пределы курсора
        OPEN cur; -- открытие курсора
        FETCH cur INTO id_cur, x_cur; -- выборка первой строки
        WHILE done = 0 DO  -- пока не вышла за пределы
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur); -- по функции рачитывается степ. принадл.
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);-- сохраняем терма, обьект,степ.принадл.
          FETCH cur INTO id_cur, x_cur; -- идем к след объекту
        END WHILE;
      END;
    WHEN 2 THEN -- ПЛОЩАДЬ КУХНИ
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.size_kitchen
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 3 THEN -- ОБЩАЯ ПЛОЩАДЬ
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.size_amount
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 4 THEN -- ЖИЛАЯ ПЛОЩАДЬ
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.size_life
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 5 THEN -- РАССТОЯНИЕ ДО ПЛЯЖА
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.distance_to_beach
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 6 THEN -- РАССТОЯНИЕ ДО МОРЯ
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.distance_to_sea
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 7 THEN -- РАССТОЯНИЕ ДО ШКОЛЫ
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.distance_school
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 8 THEN -- РАССТОЯНИЕ ДО МАГАЗИНА
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.distance_to_shop
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 9 THEN -- ВЫСОТА НАД УРОВНЕМ МОРЯ
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.hight_on_sea
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 10 THEN -- РАССТОЯНИЕ ДО ОСТАНОВКИ
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.distance_to_bus_stop
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 11 THEN -- ЭТАЖНОСТЬ ЗДАНИЯ
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.home_floors
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
    WHEN 12 THEN -- ЭТАЖ
      BEGIN
        DECLARE cur CURSOR FOR
        SELECT
          o.id,
          o.floor
        FROM object o;
        DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
        OPEN cur;
        FETCH cur INTO id_cur, x_cur;
        WHILE done = 0 DO
          SET mu = change_fp(NEW.id_func_own, NEW.a, NEW.b, NEW.c, NEW.d, x_cur);
          INSERT INTO belong (id_ling_term, id_object, own)
            VALUES (New.id, id_cur, mu);
          FETCH cur INTO id_cur, x_cur;
        END WHILE;
      END;
  END CASE;
END
$$

DELIMITER ;
-- 
-- Восстановить предыдущий режим SQL (SQL mode)
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Включение внешних ключей
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;
